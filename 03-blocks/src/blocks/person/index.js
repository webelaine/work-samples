const { registerBlockType } = wp.blocks;
const { InnerBlocks, InspectorControls, MediaUpload, MediaUploadCheck, RichText } = wp.blockEditor;
const { Button, PanelBody, RadioControl, SelectControl, TextControl } = wp.components;

registerBlockType('stmu/person', {
    title: 'Person',
    icon: 'id',
    category: 'widgets',
    attributes: {
        extraInfo: {
            type: 'string',
            selector: '.personInfo',
            default: '(Optional Title or Year)'
        },
        gender: {
            type: 'string',
            selector: '.personGender',
            default: 'Unknown'
        },
        imgURL: {
            type: 'string',
            source: 'attribute',
            attribute: 'src',
            selector: '.personImage img',
        },
        imgID: {
            type: 'number',
        },
        imgAlt: {
            type: 'string',
            source: 'attribute',
            attribute: 'alt',
            selector: '.personImage img',
        },
        level: {
            type: 'string',
            default: 'h2',
            selector: '.personName'
        },
        link: {
            type: 'string',
            selector: '.personLink',
            attribute: 'href'
        },
        name: {
            type: 'string',
            source: 'text',
            selector: '.personName',
            default: 'Firstname Lastname'
        },
        type: {
            type: 'string',
            selector: '.wp-block-stmu-person',
            default: 'Other',
            attribute: 'itemprop'
        }
    },
    edit: props => {
        const { attributes: { extraInfo, gender, imgURL, imgID, imgAlt, level, link, name, type }, className, setAttributes, isSelected } = props;
        const HeadingTag = `${ level }`;
        const onSelectImage = img => {
            // If original image is 150x150, use it; otherwise, use thumbnail (150x150)
            // (without checking the original, the thumbnail will be empty because none is autogenerated when the original is 150x150)
            let theUrl = img.url;
            if(img.height != 150 || img.width != 150) {
                theUrl = img.sizes.thumbnail.url;
            }
            setAttributes( {
                imgID: img.id,
                imgURL: theUrl,
                imgAlt: img.alt,
            } );
        }
        const onRemoveImage = () => {
            setAttributes({
                imgID: null,
                imgURL: null,
                imgAlt: null,
            });
        }
        return (
            <div className={ className }>
                <InspectorControls>
                    <PanelBody title="Person options">
                        <RadioControl
                            label="Heading level"
                            selected={ level }
                            options={[
                                { label: 'h2', value: 'h2' },
                                { label: 'h3', value: 'h3' },
                                { label: 'h4', value: 'h4' }
                            ]}
                            onChange={ ( level ) => { setAttributes( { level } ) } }
                        />
                        <SelectControl
                            label="Person type"
                            value={ type }
                            onChange={ ( type ) => { setAttributes( { type } ) } }
                            options={ [
                                { label: 'Other', value: 'Other' },
                                { label: 'Alumni', value: 'Alumni' },
                                { label: 'Employee', value: 'Employee' }
                            ] }
                        />
                        <SelectControl
                            label="Gender"
                            value={ gender }
                            onChange={ ( gender ) => { setAttributes( { gender } ) } }
                            options={ [
                                { label: 'Unknown', value: 'Unknown' },
                                { label: 'Female', value: 'Female' },
                                { label: 'Male', value: 'Male' }
                            ] }
                        />
                        <TextControl
                            label="Link"
                            value={ link }
                            onChange={ ( link ) => { setAttributes( { link } ) } }
                        />
                    </PanelBody>
                </InspectorControls>
                <div>
                    <HeadingTag>
                        <RichText
                            tagName="span"
                            value={ name }
                            onChange={ ( name ) => { setAttributes( { name } ) } }
                            allowedFormats={ [] } // This removes bold, italic, strikethrough, and link options
                        />
                        <RichText
                            tagName="span"
                            value={ extraInfo }
                            onChange={ ( extraInfo ) => { setAttributes( { extraInfo } ) } }
                            allowedFormats={ [] } // This removes bold, italic, strikethrough, and link options
                        />
                    </HeadingTag>
                    <div className="personFlex">
                        { ! imgID ? (
                            <div class="image-wrapper">
                            <MediaUpload
                                onSelect={ onSelectImage }
                                type="image"
                                value={ imgID }
                                render={ ( { open } ) => (
                                    <Button
                                        className={ "button button-large" }
                                        onClick={ open }
                                    >
                                        Optional Image
                                    </Button>
                                ) }
                            >
                            </MediaUpload>
                        </div>
                        ) : (
                            <div class="image-wrapper">
                                <img
                                    src={ imgURL }
                                    alt={ imgAlt }
                                />
                                { isSelected ? (
                                    <Button
                                        className={ "button button-large" }
                                        onClick={ onRemoveImage }
                                    >
                                        Remove
                                    </Button>
                                ) : null }
                            </div>
                        )}
                        <InnerBlocks />
                    </div>
                </div>
            </div>
        );
    },
    save: props => {
        const { attributes: { extraInfo, gender, imgURL, imgID, imgAlt, level, link, name, type }, className, setAttributes } = props;
        let extraTag;
        if(extraInfo) {
            extraTag = <span className="personInfo">{ extraInfo }</span>;
        }
        let genderTag;
        if(gender != 'Unknown') {
            genderTag = <span itemprop="gender" style="display:none;" data-swiftype-index="false">{ gender }</span>;
        }
        const HeadingTag = `${ level }`;
        let imageTag;
        if(imgID) {
            imageTag = <div className="personImage"><img src={ imgURL } alt={ imgAlt } /></div>;
        }
        let linkTag;
        if(link) {
            linkTag = <link className="personLink" itemprop="sameAs" href={ link } />;
        }
        let personType='member';
        if(type == 'Alumni') {
            personType = 'alumni';
        } else if(type == 'Employee') {
            personType = 'employee'
        }
        return (
            <div className={ className } itemprop={ personType } itemscope itemtype="https://schema.org/Person">
                <HeadingTag>
                    <span itemprop="name" className="personName">{ name }</span>
                    { extraTag }
                </HeadingTag>
                <div className="personFlex">
                    { imageTag }
                    { linkTag }
                    { genderTag }
                    <div itemprop="description">
                        <InnerBlocks.Content />
                    </div>
                </div>
            </div>
        );
    }
});